import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
const initialState = {
    drinks: [
        {
            name: "Puerh Tea",
            taste: "bitter",
            categories: ["tea", "hot drinks"],
            origin: "China",
            id: 1,
        },

        {
            name: "Cocoa",
            taste: "sweet",
            categories: ["hot drinks", "desserts"],
            origin: "Mexico",
            id: 2,
        },
        {
            name: "Kombucha",
            taste: "sweet",
            categories: ["fizzy drinks", "healthy"],
            origin: "China",
            id: 3,
        }
    ],
    filteredDrinks: []

};
export const drinksSlice = createSlice({
    name: 'allDrinks',
    initialState,
    reducers: {
        add: (state, action) => {
            state.filteredDrinks = []
            state.drinks.push(action.payload)
            console.log(state.drinks.map(drink => drink.name));
            console.log(state.drinks.map(drink => drink.taste));
        },
        filter: (state, action) => {
            if (action.payload === "") {
                state.filteredDrinks = []
            }
            const filteredData = state.drinks.filter(value => value.name.toLowerCase().trim().includes(action.payload.toLowerCase().trim()))
            state.filteredDrinks = filteredData
            console.log(state.filteredDrinks);
        },
        resetFilter: (state) => {
            state.filteredDrinks = []
            console.log(state.drinks);
            return state.drinks;
        },
        // showDetails: (state, action) => {
        //     console.log(action.payload + "from slice")

        // }

        // delet: (state) => {
        //     state.value -= 1;
        // },
    }
})
//         // Use the PayloadAction type to declare the contents of `action.payload`
//         incrementByAmount: (state, action) => {
//             state.value += action.payload;
//         },
//     },
// The `extraReducers` field lets the slice handle actions defined elsewhere,
// including actions generated by createAsyncThunk or in other slices.
// extraReducers: (builder) => {
//     builder
//         .addCase(incrementAsync.pending, (state) => {
//             state.status = 'loading';
//         })
//         .addCase(incrementAsync.fulfilled, (state, action) => {
//             state.status = 'idle';
//             state.value += action.payload;
//         });
// },
// });

// export const { increment, decrement, incrementByAmount } = counterSlice.actions;

// // The function below is called a selector and allows us to select a value from
// // the state. Selectors can also be defined inline where they're used instead of
// // in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectCount = (state) => state.counter.value;

// // We can also write thunks by hand, which may contain both sync and async logic.
// // Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//         dispatch(incrementByAmount(amount));
//     }
// };
export const { add, filter, resetFilter } = drinksSlice.actions;
export default drinksSlice.reducer;
